import os
import sqlite3
import time
import os

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from config import TOKEN, admin_id

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

connect = sqlite3.connect('users_info.bd')
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS users_info(
        user_id INT PRIMARY KEY,
        user_teg TEXT
    )""")

connect.commit()

connect = sqlite3.connect('ban_users.bd')
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS ban_users(
        ban_user_id INT PRIMARY KEY,
        ban_user_teg TEXT
    )""")

connect.commit()

connect = sqlite3.connect('btc_checks.bd')
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS btc_checks(
        btc_check TEXT
    )""")

connect.commit()

connect = sqlite3.connect('products_list.bd')
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS spotify_acc(
        login_pass TEXT
    )""")

cursor.execute("""CREATE TABLE IF NOT EXISTS youtube_acc(
        login_pass TEXT
    )""")

cursor.execute("""CREATE TABLE IF NOT EXISTS game_acc(
        login_pass
    )""")

connect.commit()

@dp.message_handler(commands=['start'], state=None)
async def command_start(message: types.Message):
    if message.from_user.username is None:
        await bot.send_message(message.from_user.id, '‚õîÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å <b>—Ç–µ–≥</b>‚õî', parse_mode='html')
    else:
        connect = sqlite3.connect('ban_users.bd')
        cursor = connect.cursor()

        cursor.execute(f"SELECT ban_user_id FROM ban_users WHERE ban_user_id = {message.from_user.id}")
        data_ban = cursor.fetchone()
        connect.commit()
        if data_ban is None:
            connect = sqlite3.connect('users_info.bd')
            cursor = connect.cursor()

            people_id = message.from_user.id
            cursor.execute(f"SELECT user_id FROM users_info WHERE user_id = {people_id}")
            data = cursor.fetchone()

            if data is None:
                user_id = message.from_user.id
                user_teg = message.from_user.username

                user_inf = [user_id, user_teg]

                cursor.execute("INSERT INTO users_info VALUES(?,?)", user_inf)
                connect.commit()
                await bot.send_message(admin_id, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_teg} —Å id{user_id} –∑–∞—à—ë–ª –≤ –±–æ—Ç–∞!')
            else:
                pass

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            box_button = types.KeyboardButton('üóÉ–ö–æ—Ä–æ–±–∫–∞')
            acc_button = types.KeyboardButton('üíà–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
            BTC_obnal_button = types.KeyboardButton('üìã–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å BTC –±–∞–Ω–∫–∏—Ä')
            bot_info_button = types.KeyboardButton('üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
            markup.add(box_button, acc_button, BTC_obnal_button, bot_info_button)

            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è <b>{message.from_user.first_name}</b>!\n\n ‚öúÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ö–∞–ª—è–≤–Ω—ã–π BTC —á–µ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏, –Ω–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –Ω–∞—á–∏–Ω–∞—é –æ—Ç Spotify premium –∑–∞–∫–∞–Ω—á–∏–≤–∞—è WoT‚öú\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help', parse_mode='html', reply_markup=markup)
        else:
            await bot.send_message(message.from_user.id, '–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')



@dp.message_handler(commands=['help'], state=None)
async def command_help(message: types.Message):
    if message.from_user.username is None:
        await bot.send_message(message.from_user.id, '‚õî<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å <b>—Ç–µ–≥</b>‚õî', parse_mode='html')
    else:
        connect = sqlite3.connect('ban_users.bd')
        cursor = connect.cursor()

        cursor.execute(f"SELECT ban_user_id FROM ban_users WHERE ban_user_id = {message.from_user.id}")
        data_ban = cursor.fetchone()
        connect.commit()
        if data_ban is None:
            await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å BTC —á–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÉ<em>–ö–æ—Ä–æ–±–∫–∞</em>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª—Ç–∞–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üíà<em>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</em>.', parse_mode='html')
        else:
            await bot.send_message(message.from_user.id, '–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')


@dp.message_handler(commands=['admin'], state=None)
async def command_admin(message: types.Message):
    if int(message.from_user.id) == admin_id:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        add_BTC_button = types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å BTC —á–µ–∫')
        add_free_acc_button = types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
        mailing_button = types.KeyboardButton('üì£–ó–∞–ø—É—Å–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
        exit_button = types.KeyboardButton('–í—ã—Ö–æ–¥')
        markup.add(add_BTC_button, add_free_acc_button, mailing_button, exit_button)

        await bot.send_message(message.from_user.id, '‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚úÖ', reply_markup=markup)
    else:
        await bot.send_message(message.from_user.id, '‚õî–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚õî')

@dp.message_handler(commands=['ban'], state=None)
async def command_ban(message: types.Message):
    if int(message.from_user.id) == admin_id:
        markup = types.InlineKeyboardMarkup(row_width=1)
        add_ban_user_button = types.InlineKeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö‚ûï', callback_data='add_ban_users')
        exxxxxxxxxxit_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
        markup.add(add_ban_user_button, exxxxxxxxxxit_button)

        await bot.send_message(message.from_user.id, '‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚úÖ', reply_markup=markup)
    else:
        await bot.send_message(message.from_user.id, '‚õî–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚õî')

class Btc_ass(StatesGroup):
    reception = State()

class account_spotify_add(StatesGroup):
    spotify_add_account = State()

class account_youtube_add(StatesGroup):
    youtube_add_account = State()

class account_game_add(StatesGroup):
    game_add_account = State()

class meiling_state(StatesGroup):
    photo_meiling_state = State()
    text_meiling_state = State()

class ban_user_add_states(StatesGroup):
    ban_user_add = State()

@dp.message_handler(state=None)
async def keybord_hendler(message: types.Message):
    if message.from_user.username is None:
        await bot.send_message(message.from_user.id, '‚õî<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å <b>—Ç–µ–≥</b>‚õî', parse_mode='html')
    else:
        connect = sqlite3.connect('ban_users.bd')
        cursor = connect.cursor()

        cursor.execute(f"SELECT ban_user_id FROM ban_users WHERE ban_user_id = {message.from_user.id}")
        data_ban = cursor.fetchone()
        connect.commit()
        if data_ban is None:
            if message.text == '–í—ã—Ö–æ–¥':
                await message.delete()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                box_button = types.KeyboardButton('üóÉ–ö–æ—Ä–æ–±–∫–∞')
                acc_button = types.KeyboardButton('üíà–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
                BTC_obnal_button = types.KeyboardButton('üìã–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å BTC –±–∞–Ω–∫–∏—Ä')
                bot_info_button = types.KeyboardButton('üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
                markup.add(box_button, acc_button, BTC_obnal_button, bot_info_button)

                await bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
            elif message.text == 'üóÉ–ö–æ—Ä–æ–±–∫–∞':
                await message.delete()
                markup = types.InlineKeyboardMarkup(row_width=1)
                BTC_check_button = types.InlineKeyboardButton('üí∏–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫üí∏', callback_data='BTC_check')
                exit_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                markup.add(BTC_check_button, exit_button)

                await bot.send_message(message.from_user.id, 'üî∞–ù–∞–∂–º–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫üî∞', reply_markup=markup)
            elif message.text == 'üíà–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
                await message.delete()
                markup = types.InlineKeyboardMarkup(row_width=1)
                spotify_button = types.InlineKeyboardButton('üéßSpotify Premiumüéß', callback_data='spotify_premium_hendler')
                youtube_button = types.InlineKeyboardButton('üìΩYouTube PremiumüìΩ', callback_data='youtube_premium_hendler')
                game_button = types.InlineKeyboardButton('üéÆ–ê–∫–∫–∞—É–Ω—Ç—ã —Å –ò–≥—Ä–∞–º–∏üéÆ', callback_data='game_acc_hendler')
                exit_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                markup.add(spotify_button, youtube_button, game_button, exit_button)

                await bot.send_message(message.from_user.id, 'üî∞–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüî∞', reply_markup=markup)
            elif message.text == 'üìã–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å BTC –±–∞–Ω–∫–∏—Ä':
                await message.delete()
                markup = types.InlineKeyboardMarkup(row_width=1)
                exiittt_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                markup.add(exiittt_button)

                await bot.send_message(message.from_user.id, 'https://telegra.ph/Kak-vyvesti-dengi-s-BTC-bankir-08-21\n\n–í–æ—Ç –º–æ—è —Å—Ç–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Ç–µ–º—É', reply_markup=markup)
            elif message.text == 'üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ':
                connect = sqlite3.connect('users_info.bd')
                cursor = connect.cursor()

                cursor.execute("SELECT COUNT (user_id) FROM users_info")
                lines = cursor.fetchone()

                markup = types.InlineKeyboardMarkup(row_width=1)
                es_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                markup.add(es_button)

                await bot.send_message(message.from_user.id, f'–í –±–æ—Ç–µ –≤—Å–µ–≥–æ {lines[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë•\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ - @SPICERMr', reply_markup=markup)
                await message.delete()
            if int(message.from_user.id) == admin_id:
                if message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å BTC —á–µ–∫':
                    await message.delete()
                    await bot.send_message(message.from_user.id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ BTC —á–µ–∫, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ -')

                    await Btc_ass.reception.set()
                elif message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
                    await message.delete()
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    spotify_add = types.InlineKeyboardButton('üéß–î–æ–±–∞–≤–∏—Ç—å Spotify Premiumüéß', callback_data='add_spotify_premium')
                    youtube_add = types.InlineKeyboardButton('üìΩ–î–æ–±–∞–≤–∏—Ç—å YouTube PremiumüìΩ', callback_data='add_youtube_premium')
                    game_add = types.InlineKeyboardButton('üéÆ–î–æ–±–∞–≤–∏—Ç—å –ê–∫–∫–∞—É–Ω—Ç—ã —Å –ò–≥—Ä–∞–º–∏üéÆ', callback_data='add_game_acc')
                    exiiiit_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                    markup.add(spotify_add, youtube_add, game_add, exiiiit_button)

                    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=markup)
                elif message.text == 'üì£–ó–∞–ø—É—Å–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    Photo_meiling_button = types.InlineKeyboardButton('üì∑–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æüì∑', callback_data='photo_meiling')
                    Text_meiling_button = types.InlineKeyboardButton('üìù–¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data='text_meiling')
                    exxxxit_button = types.InlineKeyboardButton('üí¢–í—ã—Ö–æ–¥üí¢', callback_data='exit_inline_button')
                    markup.add(Photo_meiling_button, Text_meiling_button, exxxxit_button)

                    await bot.send_message(message.from_user.id, 'üî∞–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏üî∞', reply_markup=markup)
                    await message.delete()
        else:
            await bot.send_message(message.from_user.id, '–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

@dp.callback_query_handler(lambda c: c.data == 'add_ban_users', state=None)
async def add_ba_users_hendler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å, –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à—Ç–µ -')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await ban_user_add_states.ban_user_add.set()

@dp.message_handler(state=ban_user_add_states.ban_user_add)
async def bab(message: types.Message, state: FSMContext):
    ban_user_teg = message.text
    if ban_user_teg == '-':
        await bot.send_message(message.from_user.id, '‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå')
        await state.finish()
    else:
        connect = sqlite3.connect('users_info.bd')
        cursor = connect.cursor()

        cursor.execute("SELECT user_id FROM users_info WHERE user_teg = ?", (ban_user_teg,))
        ban_user_id = cursor.fetchone()
        if ban_user_id is None:
            await bot.send_message(admin_id, '‚õîÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω, –∏–ª–∏ —Ç–∞–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç—É‚õîÔ∏è')
        else:
            cursor.execute("DELETE FROM users_info WHERE user_id = ?", (ban_user_id[0],))
            connect.commit()

            connect = sqlite3.connect('ban_users.bd')
            cursor = connect.cursor()

            cursor.execute(f"SELECT ban_user_id FROM ban_users WHERE ban_user_id = {ban_user_id[0]}")
            data = cursor.fetchone()

            if data is None:
                ban_user_info = [ban_user_id[0], ban_user_teg]
                print(ban_user_info)
                cursor.execute("INSERT INTO ban_users VALUES(?,?)", ban_user_info)
                connect.commit()
                await bot.send_message(admin_id, '‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω‚úÖ')
                
                await state.finish()
            else:
                pass

@dp.callback_query_handler(lambda c: c.data == 'text_meiling', state=None)
async def text_mailing(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å —Ä–∞—Å—Å—ã–ª–∫–∏, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await meiling_state.text_meiling_state.set()

@dp.message_handler(state=meiling_state.text_meiling_state)
async def text_meiling_hendler(message: types.Message, state: FSMContext):
    mailing_text = message.text
    if mailing_text == '-':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()
    else:
        connect = sqlite3.connect('users_info.bd')
        cursor = connect.cursor()

        cursor.execute("SELECT user_id FROM users_info")
        all_users_id = cursor.fetchall()
        connect.commit()

        await bot.send_message(admin_id, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞‚úÖ')

        for i in range(len(all_users_id)):
            try:
                time.sleep(1)
                await bot.send_message(all_users_id[i][0], mailing_text)
            except:
                pass

        await bot.send_message(admin_id, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ')

        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'photo_meiling', state=None)
async def photo_meiling(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await meiling_state.photo_meiling_state.set()


@dp.message_handler(content_types=['photo'], state=meiling_state.photo_meiling_state)
async def photo_meiling_hendler(message: types.Message, state: FSMContext):
    sent_message = message.text
    if sent_message == '-':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        await state.finish()
    else:
        photo_id = message.photo[-1].file_id
        file_photo = await bot.get_file(photo_id)
        photo_name, photo_extension = os.path.splitext(file_photo.file_path)

        downloaded_photo = await bot.download_file(file_photo.file_path)

        src = 'Photo/' + photo_id + photo_extension
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_photo.getvalue())
        await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')

        async with state.proxy() as data:
            data['photo_id'] = photo_id
            data['photo_extension'] = photo_extension

        await meiling_state.text_meiling_state.set()

@dp.message_handler(state=meiling_state.text_meiling_state)
async def text_meiling_state(message: types.Message, state: FSMContext):
    mailing_text = message.text
    connect = sqlite3.connect('users_info.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT user_id FROM users_info")
    all_users_id = cursor.fetchall()
    connect.commit()

    await bot.send_message(admin_id, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞‚úÖ')

    for i in range(len(all_users_id)):
        try:
            time.sleep(1)
            data=await state.get_data()
            photo_id = data.get("photo_id")
            photo_extension = data.get("photo_extension")
            photo_path = 'Photo/' + photo_id + photo_extension
            photo = open(photo_path, 'rb')
            await bot.send_photo(all_users_id[i][0], photo, caption=mailing_text)
        except:
            pass
    await bot.send_message(admin_id, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–µ–≤–µ—Ä—à–µ–Ω–∞‚úÖ')

    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'add_game_acc')
async def add_you(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–∏–¥–µ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -')
    await account_game_add.game_add_account.set()
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.message_handler(state=account_game_add.game_add_account)
async def add_game(message: types.Message, state: FSMContext):
    acc = message.text
    if acc == '-':
        await bot.send_message(message.from_user.id, '‚ùå–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ò–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå')
        await state.finish()
    else:
        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("INSERT INTO game_acc VALUES(?)", (acc,))
        connect.commit()
        await bot.send_message(admin_id, '‚úÖ–ò–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')

        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'add_youtube_premium')
async def add_you(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–∏–¥–µ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -')
    await account_youtube_add.youtube_add_account.set()
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.message_handler(state=account_youtube_add.youtube_add_account)
async def aff_acc_you(message: types.Message, state: FSMContext):
    acc = message.text
    if acc == '-':
        await bot.send_message(message.from_user.id, '‚ùå–î–æ–±–∞–≤–ª–µ–Ω–∏–µ YouTube –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå')
        await state.finish()
    else:
        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("INSERT INTO youtube_acc VALUES(?)", (acc,))
        connect.commit()
        await bot.send_message(admin_id, '‚úÖYouTube –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')

        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'add_spotify_premium')
async def add_spott(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–∏–¥–µ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -')
    await account_spotify_add.spotify_add_account.set()
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.message_handler(state=account_spotify_add.spotify_add_account)
async def add_account_spot(message: types.Message, state: FSMContext):
    acc = message.text
    if acc == '-':
        await bot.send_message(message.from_user.id, '‚ùå–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Spotify –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå')
        await state.finish()
    else:
        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("INSERT INTO spotify_acc VALUES(?)", (acc,))
        connect.commit()
        await bot.send_message(admin_id, '‚úÖSpotify –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')

        await state.finish()


@dp.message_handler(state=Btc_ass.reception)
async def btc_check_save(message: types.Message, state: FSMContext):
    btc_check = message.text
    if btc_check == '-':
        await message.reply('‚ùå–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå')
        await state.finish()
    else:
        connect = sqlite3.connect('btc_checks.bd')
        cursor = connect.cursor()

        cursor.execute("INSERT INTO btc_checks VALUES(?)", (btc_check,))
        connect.commit()
        await bot.send_message(admin_id, '‚úÖ–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')

        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'game_acc_hendler', state=None)
async def game_acc_hendler(callback_query: types.CallbackQuery):
    connect = sqlite3.connect('products_list.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT * FROM game_acc")
    game_acc = cursor.fetchone()

    connect.commit()

    if game_acc is None:
        await bot.answer_callback_query(callback_query.id, '‚òπÔ∏è–£–≤—ã, –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç‚òπÔ∏è')
    else:
        await bot.send_message(callback_query.from_user.id, f'{game_acc[0]} –≤–∏–¥ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å')

        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("DELETE FROM game_acc WHERE login_pass = ?", (game_acc[0],))
        connect.commit()

        preser_teg = callback_query.from_user.username
        await bot.send_message(admin_id, f'@{preser_teg} –∑–∞–±—Ä–∞–ª –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'youtube_premium_hendler', state=None)
async def youtube_premium_hendler(callback_query: types.CallbackQuery):
    connect = sqlite3.connect('products_list.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT * FROM youtube_acc")
    youtube_acc = cursor.fetchone()

    connect.commit()

    if youtube_acc is None:
        await bot.answer_callback_query(callback_query.id, '‚òπÔ∏è–£–≤—ã, –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç‚òπÔ∏è')
    else:
        await bot.send_message(callback_query.from_user.id, f'{youtube_acc[0]} –≤–∏–¥ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å')
        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("DELETE FROM youtube_acc WHERE login_pass = ?", (youtube_acc[0],))

        connect.commit()

        preser_teg = callback_query.from_user.username
        await bot.send_message(admin_id, f'@{preser_teg} –∑–∞–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç YouTube Premium!')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'spotify_premium_hendler', state=None)
async def spotify_premium_hendler(callback_query: types.CallbackQuery):
    connect = sqlite3.connect('products_list.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT * FROM spotify_acc")
    spotify_acc = cursor.fetchone()
    connect.commit()

    if spotify_acc is None:
        await bot.answer_callback_query(callback_query.id, text='‚òπÔ∏è–£–≤—ã, –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç‚òπÔ∏è')
    else:
        await bot.send_message(callback_query.from_user.id, f'{spotify_acc[0]} –≤–∏–¥ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å')

        connect = sqlite3.connect('products_list.bd')
        cursor = connect.cursor()

        cursor.execute("DELETE FROM spotify_acc WHERE login_pass = ?", (spotify_acc[0],))

        connect.commit()

        preser_teg = callback_query.from_user.username

        await bot.send_message(admin_id, f'@{preser_teg} –∑–∞–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç Spotify Premium!')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'exit_inline_button')
async def exit_button_hendler_inline(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'BTC_check')
async def BTC_check_hendler(callback_query: types.CallbackQuery):
    connect = sqlite3.connect('btc_checks.bd')
    cursor = connect.cursor()

    cursor.execute("SELECT * FROM btc_checks")
    btc_check = cursor.fetchone()

    connect.commit()

    if btc_check is None:
        await bot.answer_callback_query(callback_query.id, text='‚òπÔ∏è–£–≤—ã, —á–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç‚òπÔ∏è')
    else:
        await bot.send_message(callback_query.from_user.id, btc_check)

        connect = sqlite3.connect('btc_checks.bd')
        cursor = connect.cursor()

        cursor.execute("""DELETE FROM btc_checks""")

        connect.commit()

        btc_winner = callback_query.from_user.username

        await bot.send_message(admin_id, f'@{btc_winner} –∑–∞–±—Ä–∞–ª BTC —á–µ–∫!')
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

if __name__ == '__main__':
    executor.start_polling(dp)
